Query: Is there a cat or dog in the image?
Program:
def execute_command(image) -> str:
    image_patch = ImagePatch(image)
    cats = image_patch.find("cat")
    dogs = image_patch.find("dog")
    has_cats_or_dogs = len(cats) > 0 or len(dogs) > 0
    return bool_to_yesno(has_cats_or_dogs)
Tests:
1. Image Caption: "A cat sleeping on a couch" Answer: yes
2. Image Caption: "A dog running in the park" Answer: yes
3. Image Caption: "Two cats playing with a ball" Answer: yes
4. Image Caption: "A group of horses at a beach" Answer: no
5. Image Caption: "A cat and a dog playing together" Answer: yes
6. Image Caption: "An empty room with no animals" Answer: no

Query: Is there a red truck or bus in the image?
Program:
def execute_command(image) -> str:
    image_patch = ImagePatch(image)
    trucks = image_patch.find("truck")
    buses = image_patch.find("bus")
    red_trucks = [truck for truck in trucks if truck.verify_property("truck", "red")]
    red_buses = [bus for bus in buses if bus.verify_property("bus", "red")]
    has_red_trucks_or_buses = len(red_trucks) > 0 or len(red_buses) > 0
    return bool_to_yesno(has_red_trucks_or_buses)
Tests:
1. Image Caption: "Red Ford pickup truck" Answer: yes
2. Image Caption: "Red city bus downtown" Answer: yes
3. Image Caption: "Blue semi-truck on highway" Answer: yes
4. Image Caption: "Street with no buses or trucks" Answer: no
5. Image Caption: "Red sports car on race track" Answer: no
6. Image Caption: "Fleet of red delivery trucks" Answer: yes
7. Image Caption: "Yellow buses lined up at school" Answer: no

Query: What color is the largest car in the image?
def execute_command(image) -> str:
    image_patch = ImagePatch(image)
    car_patches = image_patch.find("car")
    if not car_patches:
        return "No cars found in the image."
    # Sort cars by their area to find the largest one
    car_patches.sort(key=lambda x: x.area, reverse=True)
    largest_car_patch = car_patches[0]
    color_of_largest_car = largest_car_patch.simple_query("What is the color?")
    return color_of_largest_car
Tests:
1. Image Caption: "Blue Ford truck on highway" Answer: blue
2. Image Caption: "Street with no buses or trucks" Answer: no answer
3. Image Caption: "Line of green food trucks" Answer: green
4. Image Caption: "Green public bus and blue pickup truck" Answer: green

Query: Is the vase to the left or right of the center?
Program:
def execute_command(image) -> str:
    image_patch = ImagePatch(image)
    vase_patches = image_patch.find("vase")
    if not vase_patches:
        return "No vases found in the image."
    vase_patch = vase_patches[0]
    vase_position = vase_patch.horizontal_center
    image_center = (image_patch.left + image_patch.right) / 2
    if vase_position < image_center:
        return "left"
    elif vase_position > image_center:
        return "right"
    else:
        return "center"
Tests:
1. Image Caption: "A vase on the right side of a table" Answer: right
2. Image Caption: "A vase on the left side of a bed" Answer: left
3. Image Caption: "A vase in the center side of a table" Answer: center
  
Query: What is the highest object in the image?
Program:
def execute_command(image) -> str:
    image_patch = ImagePatch(image)
    possible_objects = ["car", "tree", "building", "person", "vase", "animal", "vehicle", "furniture"]
    all_patches = []
    for obj in possible_objects:
        all_patches.extend(image_patch.find(obj))
    if not all_patches:
        return "No objects found in the image."
    highest_patch = min(all_patches, key=lambda x: x.upper)
    highest_object_name = highest_patch.simple_query("What is this?")
    return highest_object_name
Tests:
1. Image Caption: "Tall skyscraper towering over other buildings" Answer: skyscraper
2. Image Caption: "A tree that stands taller than the house next to it" Answer: tree
3. Image Caption: "Multiple balloons floating higher than trees" Answer: balloons
4. Image Caption: "A plane flying higher than the skyscrapers" Answer: "plane"
5. Image Caption: "An eagle soaring above the canyon" Answer: "eagle"
6. Image Caption: "A person standing on a hill" Answer: "person"

Create test cases for the specified query and program using the format provided in the examples. 
The test cases should consist of image captions and answers to the query.
The answers should be consice, limited to a single word. 

Query: INSERT_QUERY_HERE
Program:
INSERT_PROGRAM_HERE
Tests: