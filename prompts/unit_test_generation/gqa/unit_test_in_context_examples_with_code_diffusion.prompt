Query: Is there a cat or dog in the image?
Program:
def execute_command(image) -> str:
    image_patch = ImagePatch(image)
    cats = image_patch.find("cat")
    dogs = image_patch.find("dog")
    has_cats_or_dogs = len(cats) > 0 or len(dogs) > 0
    return bool_to_yesno(has_cats_or_dogs)
Tests:
1. Image Caption: "A grey tabby cat peacefully napping on a plush sofa" Answer: yes
2. Image Caption: "A lively golden retriever bounding across a grassy field in the park" Answer: yes
3. Image Caption: "Twin Siamese cats playfully swatting at a bright yellow ball" Answer: yes
4. Image Caption: "A cluster of wild horses trotting along the sandy shores of a sunlit beach" Answer: no
5. Image Caption: "An orange cat and a black Labrador playfully tugging on a rope toy" Answer: yes
6. Image Caption: "A modern living room featuring sleek furniture and devoid of any pets" Answer: no

Query: Is there a red truck or bus in the image?
Program:
def execute_command(image) -> str:
    image_patch = ImagePatch(image)
    trucks = image_patch.find("truck")
    buses = image_patch.find("bus")
    red_trucks = [truck for truck in trucks if truck.verify_property("truck", "red")]
    red_buses = [bus for bus in buses if bus.verify_property("bus", "red")]
    has_red_trucks_or_buses = len(red_trucks) > 0 or len(red_buses) > 0
    return bool_to_yesno(has_red_trucks_or_buses)
Tests:
1. Image Caption: "A vibrant red Ford pickup parked beside a country road" Answer: yes
2. Image Caption: "A red double-decker bus navigating through a busy downtown street" Answer: yes
3. Image Caption: "A large blue semi-truck cruising down an interstate highway" Answer: no
4. Image Caption: "A quiet suburban street devoid of any large vehicles like buses or trucks" Answer: no
5. Image Caption: "A shiny red Ferrari speeding on a professional race track" Answer: no
6. Image Caption: "An array of red delivery trucks lined up in a distribution center parking lot" Answer: yes
7. Image Caption: "Several bright yellow school buses parked in a row at a local school" Answer: no


Query: What color is the largest car in the image?
def execute_command(image) -> str:
    image_patch = ImagePatch(image)
    car_patches = image_patch.find("car")
    if not car_patches:
        return "No cars found in the image."
    # Sort cars by their area to find the largest one
    car_patches.sort(key=lambda x: x.area, reverse=True)
    largest_car_patch = car_patches[0]
    color_of_largest_car = largest_car_patch.simple_query("What is the color?")
    return color_of_largest_car
Tests:
1. Image Caption: "A large blue Ford pickup truck driving on a busy highway" Answer: blue
2. Image Caption: "A city street empty of any large vehicles like buses or trucks" Answer: no answer
3. Image Caption: "A row of green food trucks serving lunch in an urban park" Answer: green
4. Image Caption: "A scene with a green public bus next to a smaller blue pickup at an intersection" Answer: green

Query: Is the vase to the left or right of the center?
Program:
def execute_command(image) -> str:
    image_patch = ImagePatch(image)
    vase_patches = image_patch.find("vase")
    if not vase_patches:
        return "No vases found in the image."
    vase_patch = vase_patches[0]
    vase_position = vase_patch.horizontal_center
    image_center = (image_patch.left + image_patch.right) / 2
    if vase_position < image_center:
        return "left"
    elif vase_position > image_center:
        return "right"
    else:
        return "center"
Tests:
1. Image Caption: "A delicate porcelain vase positioned on the right end of a mahogany dining table" Answer: right
2. Image Caption: "A tall glass vase sitting on the left side of a neatly made bed in a sunlit room" Answer: left
3. Image Caption: "A ceramic vase centrally placed on a round table surrounded by chairs" Answer: center

Query: What is the highest object in the image?
Program:
def execute_command(image) -> str:
    image_patch = ImagePatch(image)
    possible_objects = ["car", "tree", "building", "person", "vase", "animal", "vehicle", "furniture"]
    all_patches = []
    for obj in possible_objects:
        all_patches.extend(image_patch.find(obj))
    if not all_patches:
        return "No objects found in the image."
    highest_patch = max(all_patches, key=lambda x: x.upper)
    highest_object_name = highest_patch.simple_query("What is this?")
    return highest_object_name
Tests:
1. Image Caption: "A massive skyscraper dominating the skyline among lower city buildings" Answer: skyscraper
2. Image Caption: "A lone oak tree surpassing the height of the cottage it stands next to" Answer: tree
3. Image Caption: "Colorful balloons drifting above the treetops in a clear sky" Answer: balloons
4. Image Caption: "A commercial jet flying high above the city's tallest skyscrapers" Answer: plane
5. Image Caption: "A majestic eagle soaring high above a vast canyon landscape" Answer: eagle
6. Image Caption: "A figure standing on the peak of a grassy hill under a blue sky" Answer: person

Create test cases for the specified query and program using the format provided in the examples. 
The test cases should consist of image captions and answers to the query.
The answers should be consice, limited to a single word. 

Query: INSERT_QUERY_HERE
Program:
INSERT_PROGRAM_HERE
Tests: